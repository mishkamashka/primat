#! /usr/bin/perl
use List::MoreUtils qw(first_index);

$string;
@stack = ('#');
@symbols = qw(A B C F a b c x d);
@rules = (["AaB", "B"], ["CbB", "C"], ["cF", "x"], ["Ad"]);
@less = (
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,1,1,0],
[0,0,1,0,0,0,1,1,0],
[1,1,1,0,0,0,1,1,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0]);

@more = (
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,1],
[0,0,0,0,1,0,0,0,1],
[0,0,0,0,1,1,0,0,1],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,1,0,0,1],
[0,0,0,0,1,1,0,0,1]);

@eq = (
[0,0,0,0,1,0,0,0,1],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0]);

sub fold {
	$s = @_[0];
	@base = "";
	push(@base, pop(@stack));
	$j = first_index {$_ eq $base[-1]} @symbols;
	$i = first_index {$_ eq $stack[-1]} @symbols;
	
	while (!$less[$i][$j] and !($stack[-1] eq '#')) {
		push(@base, pop(@stack));
		$j = first_index {$_ eq $base[-1]} @symbols;
		$i = first_index {$_ eq $stack[-1]} @symbols;
		print "	base: {@base}, stack: {@stack}\n";
	}
	@base = reverse @base;
	$string = join("", @base);
	$letter = '';
	for (my $k=0; $k <= 3 and ($letter eq ''); $k++) {
	for (my $n=0; $n <= 1 and ($letter eq ''); $n++) {
 		if ($rules[$k][$n] eq $string) {
			print "	$string = $rules[$k][$n] - letter $symbols[$k]\n";
			$letter = $symbols[$k];
		} else {
			if ($rules[$k][$n] ne '') {
				print "	$rules[$k][$n] - no success\n";
			}
		}
	}}
	if ($letter eq '') { return -1;}
	else {
		push(@stack, $letter);
		print "	stack: @stack\n";
		return 0;
	}
}


sub recognise {
	@string = split //, @_[0];
	foreach $cur_letter (@string) {
suc_fold:
		$j = first_index {$_ eq $cur_letter} @symbols;
		$i = first_index {$_ eq $stack[-1]} @symbols;
		print "stack: {@stack}, s: {$cur_letter}, string: {@string}\n";

		if ($eq[$i][$j] or $less[$i][$j] or ($stack[-1] eq '#')) {
			print "{@stack} <- moving $cur_letter\n";
			push(@stack, $cur_letter);
		} else { 
			if ($more[$i][$j] or ($cur_letter eq '#')) {
				print "folding\n";
				if (fold == -1) { return -1;}
				goto suc_fold;
			}
			else {print "error - no relation between $stack[-1] and $cur_letter \n"; return -1;}
		}
		print "stack: @stack\n"; 
		if ($cur_letter eq '#') {
			$result = join("", @stack);
			print "RESULT $result\n";
			if (($result eq ("#A#")) or ($result eq ("#F#"))) { return 0;}
			else {return -1;}
		}
		print "eq: $eq[$i][$j]\n";
	}
	return 0;
}

while (1) {
	chomp ($input_string = <STDIN>);
	$i = recognise("$input_string#");
	if ($i == -1) {	print "this string is not a part of language\n"; exit(0);}
	if ($i == 0) { print "$input_string is a part of the language\n"; exit(0);}
}
